version: '3.4'
services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_DB=postgres
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    expose:
      - "2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - 9093
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "client:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
      - db
  ############################################################
  client-service-fr:
    container_name: clientservice-fr
    build:
      context: clientService
    image: clientservice:latest
    environment:
        - locale=ETC
    expose:
      - 8080
    ports:
      - "8080:8080"
    links:
      - db
      - time-service
      - elasticsearch
    depends_on:
      - elasticsearch
      - kafka
      - time-service

  client-service-us:
    container_name: clientservice-us
    image: clientservice:latest
    environment:
      - locale=EST
    expose:
      - 8080
    ports:
      - "9080:8080"
    links:
      - db
      - time-service
      - elasticsearch
    depends_on:
      - elasticsearch
      - kafka
      - time-service

  ############################################################
  time-service:
    container_name: timeservice
    build:
      context: TimeService
    image: timeservice:latest
    expose:
      - 8081
    ports:
      - "8081:8081"

  # atomic-time-service:
  #   container_name: atomicclock
  #   build:
  #     context: TimeService
  #   image: timeservice:latest
  #   expose:
  #     - 8081
  #   ports:
  #     - "9081:8081"

  ############################################################

  analyst-service:
    container_name: analystservice
    build:
      context: analystservice
    image: analystservice:latest
    depends_on:
      - elasticsearch
      - kibana
    ports:
      - "9500:9300"

  #  streamsets:
  #    image: streamsets/datacollector
  #    ports:
  #      - "18630:18630"
  kafka-connector:
    container_name: kafkaconnector
    build:
      context: kafkaconnector/nodejs/.
    image: kafkaconnector:latest
    depends_on:
      - client-service-fr
      - client-service-us

  launch-barebone:
    image: dadarek/wait-for-dependencies
    depends_on:
      - kafka
      - zookeeper
      - elasticsearch
      - kibana
      - db
    command:
      - zookeeper:2181
      - kafka:9092
      - db:5432
      - elasticsearch:9200
      - kibana:5601

  launch-services:
    image: dadarek/wait-for-dependencies
    depends_on:
      - kafka-connector
      - client-service-fr
      - client-service-us
      - time-service
      - analyst-service
      #- atomic-time-service
    command:
      #- atomic-time-service:8081
      - time-service:8081
      - client-service-fr:8080
      - client-service-us:8080
      - analyst-service:9300

volumes:
  elasticsearch:
